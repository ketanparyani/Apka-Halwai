{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai\\\\Desktop\\\\Apka Halwai\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n// REMOVE useNavigate import\n\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  // REMOVE the navigate line\n\n  useEffect(() => {\n    if (token) {\n      const userData = localStorage.getItem('user');\n      if (userData) {\n        setUser(JSON.parse(userData));\n      }\n    }\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await authService.login({\n        email,\n        password\n      });\n      setToken(response.token);\n      setUser(response.user);\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      // REMOVE navigate from here\n    } catch (error) {\n      throw error;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const response = await authService.register({\n        username,\n        email,\n        password\n      });\n      setToken(response.token);\n      setUser(response.user);\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('user', JSON.stringify(response.user));\n      // REMOVE navigate from here\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // REMOVE navigate from here\n  };\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      register,\n      logout,\n      isAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Z6Vnyj+tvkpOopJdPBR2TDv1n60=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","userData","JSON","parse","login","email","password","response","setItem","stringify","error","register","username","logout","removeItem","isAdmin","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Sai/Desktop/Apka Halwai/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n// REMOVE useNavigate import\r\nimport { User, AuthContextType } from '../types';\r\nimport { authService } from '../services/authService';\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\r\n  // REMOVE the navigate line\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      const userData = localStorage.getItem('user');\r\n      if (userData) {\r\n        setUser(JSON.parse(userData));\r\n      }\r\n    }\r\n  }, [token]);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      const response = await authService.login({ email, password });\r\n      setToken(response.token);\r\n      setUser(response.user);\r\n      localStorage.setItem('token', response.token);\r\n      localStorage.setItem('user', JSON.stringify(response.user));\r\n      // REMOVE navigate from here\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (username: string, email: string, password: string) => {\r\n    try {\r\n      const response = await authService.register({ username, email, password });\r\n      setToken(response.token);\r\n      setUser(response.user);\r\n      localStorage.setItem('token', response.token);\r\n      localStorage.setItem('user', JSON.stringify(response.user));\r\n      // REMOVE navigate from here\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    // REMOVE navigate from here\r\n  };\r\n\r\n  const isAdmin = user?.role === 'admin';\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, login, register, logout, isAdmin }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}